import logging
import re
import string
from dataclasses import dataclass, asdict
from typing import Union

from .notification import Notification


logger = logging.getLogger(__name__)

# –º–∞–ø–ø–∏–Ω–≥ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–∞ —ç–º–æ–¥–∑–∏
# (—á—Ç–æ–±—ã –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –±—ã–ª–æ –Ω–∞–≥–ª—è–¥–Ω–µ–µ)
PRIORITY_EMOJI = {
    'Critical': 'üü•',
    'Warning': 'üü®',
}

# —à–∞–±–ª–æ–Ω VK Teams —Å–æ–æ–±—â–µ–Ω–∏—è,
# –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ —Å–æ–±–∏—Ä–∞—é—Ç—Å—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
vkt_template = string.Template(
    "$priority_emoji <b>$server</b>\n"
    "<i>$registration_date </i>\n\n"
    "<b><code>üìñ $description</code></b>\n"
)


@dataclass
class Monitoring(Notification):
    """
    DTO –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.

    –í—Å–µ –ø–æ–ª—è –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã.
    –†–µ–∞–ª–∏–∑—É–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å dto.notification.Notification
    """

    server: str = ""
    priority: str = ""
    priority_emoji: str = ""
    registration_date: str = ""
    notification_date: str = ""
    description: str = ""

    @classmethod
    def from_notification(cls, notification_text: str) -> Union['Monitoring', None]:
        """
        –†–∞–∑–±–∏—Ä–∞–µ—Ç —Ç–µ–∫—Å—Ç –ø–∏—Å—å–º–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–æ—Ç–æ–≤—ã–π –æ–±—ä–µ–∫—Ç DTO.
        –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –Ω–µ –≤—ã—á–∏—Ç—ã–≤–∞–µ—Ç –∏–∑ –ø–∏—Å—å–º–∞ ip-–∞–¥—Ä–µ—Å–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤.

        :param notification_text: —Ç–µ–∫—Å—Ç –ø–∏—Å—å–º–∞ –æ —Å–æ–±—ã—Ç–∏–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        :return: DTO Monitoring
        """
        notf_pattern = re.compile(
            r"—Å–æ–±—ã—Ç–∏–µ –Ω–∞ –æ–±—ä–µ–∫—Ç–µ:\s+(?P<server>.+)(?:\([\d\.]+\)*).+"
            r"–ö—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—å:\s+(?P<priority>\S+).+"
            r"–°–æ–æ–±—â–µ–Ω–∏–µ:\s+(?P<description>.*?\S)(?: [\d.]+)?\s+"
            r"–í—Ä–µ–º—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:\s+(?P<reg_time>[\d\. :]+[A-Z]*)\s+"
            r"–í—Ä–µ–º—è –Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:\s+(?P<notf_time>[\d\. :]+[A-Z]*)",
            re.DOTALL
        )
        match = re.search(notf_pattern, notification_text)
        if not match:
            logger.error(f'I dont recognize that mail: {notification_text}')
            return None

        return cls(
            server=match.group('server'),
            priority=match.group('priority'),
            priority_emoji=PRIORITY_EMOJI.get(match.group('priority'), '‚ÄºÔ∏è'),
            registration_date=match.group('reg_time'),
            notification_date=match.group('notf_time'),
            description=match.group('description').removesuffix('\r'),
        )

    def prep_vkt_message(self) -> dict:
        """
        –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –∏–Ω—Ü–∏–¥–µ–Ω—Ç–µ –¥–ª—è VK Teams –∏–∑ —à–∞–±–ª–æ–Ω–∞ vkt_template (—Å–º. –≤—ã—à–µ)

        :return: —Å–ª–æ–≤–∞—Ä—å –≤–∏–¥–∞ {'text': '—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Å–æ–±—ã—Ç–∏–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞',
                               'inlineKB': 'json –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å–æ–æ–±—â–µ–Ω–∏—è (—Å–º. bot api)'}
        """
        fields = asdict(self)

        # —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º "_", –≤—ã—á–∏—â–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
        fields['description'] = fields['description'].replace('_', r'\_')
        fields['description'] = fields['description'].replace('\r', '')
        fields['description'] = '\n'.join([s for s in fields['description'].split('\n') if s])

        return {
            'text': vkt_template.substitute(fields),
            'inlineKB': None,
        }
