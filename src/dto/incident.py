import logging
import re
import string
from dataclasses import dataclass, asdict

from .notification import Notification

logger = logging.getLogger(__name__)

inc_notification_template = string.Template(
    "*#$idx   #$status*\n\n"
    "‚≠ê $priority\n"
    "üë§ $family_name $name $parent_name\n"
    "üè≠ $org_unit\n"
    "üìÜ $creation_date\n\n"
    # "üîó [–ò–Ω—Ü–∏–¥–µ–Ω—Ç –≤ ITSM]($link)\n\n"
    "ü™ß *–û–ø–∏—Å–∞–Ω–∏–µ*\n"
    "$subject\n\n"
    "üìñ *–ü–æ–¥—Ä–æ–±–Ω–æ*\n"
    "$description"
)

inc_description_template = string.Template(
    "üë§ $family_name $name $parent_name\n"
    "üè≠ $org_unit\n"
    "üìÜ $creation_date\n"
    "‚öô `$device`\n\n"
    "‚úèÔ∏è $description"
)


@dataclass
class Incident(Notification):
    idx: str = ""
    priority: str = ""
    sla: str = ""
    creation_date: str = ""
    family_name: str = ""
    name: str = ""
    parent_name: str = ""
    org_unit: str = ""
    subject: str = ""
    description: str = ""
    link: str = ""
    device: str = ""
    status: str = "OPEN"

    @classmethod
    def from_notification(cls, notification_text: str):
        # TODO –†–∞–∑–±–∏—Ç—å —Ä–µ–≥—ç–∫—Å–ø –Ω–∞ –º–µ–ª–∫–∏–µ, –æ—Ç–¥–µ–ª—å–Ω–æ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—è.
        #  –í–æ–∑–º–æ–∂–Ω–æ, —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —á—Ç–æ-—Ç–æ —Ç–∏–ø–∞ –º–∞–ø—ã –ø–æ–ª–µ: —Ä–µ–≥—ç–∫—Å–ø
        notf_pattern = re.compile(
            r"–ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ \[(?P<inc_id>INC\d+)\], \[(?P<priority>\S+)\].+"
            r"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:\s+\[(?P<date>[\d\sPAM:\.\/]+)\].+"
            r"–°—Ç–∞—Ç—É—Å SLA:\s+\[(?P<sla>.*)\].+"
            r"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:\s+\[(?:(?P<family_name>\S+) (?P<name>\S+) (?P<parent_name>\S*)|(?P<job_title>.+))\].+"
            r"–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è:\s+\[(?P<org_unit>.+)\].+"
            r"–û–ø–∏—Å–∞–Ω–∏–µ:\s+\[(?P<subject>.*)\].+"
            r"–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:.+\[(?P<description>.*)\].+"
            r"–°—Å—ã–ª–∫–∞: –ó–∞—è–≤–∫–∞ *<(?P<link>\S+)>",
            re.DOTALL
        )
        match = re.search(notf_pattern, notification_text)
        if not match:
            # print(f'I dont recognize that mail: {notification_text}')
            logger.error(f'I dont recognize that mail: {notification_text}')
            return None

        return cls(
            idx=match.group('inc_id'),
            priority=match.group('priority'),
            sla=match.group('sla'),
            creation_date=match.group('date'),
            family_name=match.group('family_name') or match.group('job_title'),
            name=match.group('name') or "",
            parent_name=match.group('parent_name') or "",
            org_unit=match.group('org_unit'),
            subject=match.group('subject'),
            description=match.group('description'),
            link=match.group('link')
        )

    @classmethod
    def from_description(cls, descr_text: str):
        descr_pattern = re.compile(
            r"–ó–∞–∫–∞–∑—á–∏–∫: +(?P<org_unit>.+) +"
            r"(?P<family_name>\S+) +(?P<name>\S+) +(?P<parent_name>\S+) *\n*"
            r"–î–∞—Ç–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è: (?P<date>[\d\s]+),.+"
            r"—Ç–∏–ø –∫–ª–∏–µ–Ω—Ç–∞ –∏ –û–°: (?P<device>.+),.+"
            r"–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã:\s*(?P<description>[\s|\S|\n]+)"
            r"(?:–° —É–≤–∞–∂–µ–Ω–∏–µ–º,[\s|\n]+–ù–∏–∫—É–ª–∏–Ω–∞ –í–∞–ª–µ–Ω—Ç–∏–Ω–∞ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–Ω–∞[\s|\S|\n]+)"
        )
        match = re.search(descr_pattern, descr_text)
        if not match:
            # print(f'I dont recognize that message: {descr_text}')
            logger.error(f'I dont recognize that message: {descr_text}')
            return None

        return cls(
            creation_date=match.group('date'),
            family_name=match.group('family_name'),
            name=match.group('name'),
            parent_name=match.group('parent_name'),
            org_unit=match.group('org_unit'),
            description=match.group('description'),
            device=match.group('device'),
        )

    @classmethod
    def from_vkt_message(cls, notification_text: str, link: str = ''):
        # TODO –†–∞–∑–±–∏—Ç—å —Ä–µ–≥—ç–∫—Å–ø –Ω–∞ –º–µ–ª–∫–∏–µ, –æ—Ç–¥–µ–ª—å–Ω–æ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—è.
        #  –í–æ–∑–º–æ–∂–Ω–æ, —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —á—Ç–æ-—Ç–æ —Ç–∏–ø–∞ –º–∞–ø—ã –ø–æ–ª–µ: —Ä–µ–≥—ç–∫—Å–ø
        vkt_msg_pattern = re.compile(
            r"#(?P<inc_id>INC\d+)   #(?P<status>\S+)\n\n"
            r"‚≠ê (?P<priority>\S+)\n"
            r"üë§ (?:(?P<family_name>\S+) (?P<name>\S+) (?P<parent_name>\S*)|(?P<job_title>.+))\n"
            r"üè≠ (?P<org_unit>.+)\n"
            r"üìÜ (?P<date>[\d\sPAM:\.\/]+)\n\n"
            r"ü™ß –û–ø–∏—Å–∞–Ω–∏–µ\n(?P<subject>.*)\n\n"
            r"üìñ –ü–æ–¥—Ä–æ–±–Ω–æ\n(?P<description>.*)",
            re.DOTALL
        )
        match = re.search(vkt_msg_pattern, notification_text)
        if not match:
            # print(f'I dont recognize that mail: {notification_text}')
            logger.error(f'I dont recognize that vkt message: {notification_text}')
            return None

        return cls(
            idx=match.group('inc_id'),
            priority=match.group('priority'),
            creation_date=match.group('date'),
            family_name=match.group('family_name') or match.group('job_title'),
            name=match.group('name') or "",
            parent_name=match.group('parent_name') or "",
            org_unit=match.group('org_unit'),
            subject=match.group('subject'),
            description=match.group('description'),
            status=match.group('status'),
            link=link
        )

    def prep_vkt_message(self) -> dict:
        fields = asdict(self)

        # —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º "_", –≤—ã—á–∏—â–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ –ø—Ä–µ–≤—Ä–∞—â–∞–µ–º –≤—Å—ë –≤ —Ü–∏—Ç–∞—Ç—É
        fields['subject'] = fields['subject'].replace('_', r'\_')
        fields['subject'] = fields['subject'].replace('\r', '')
        fields['subject'] = '\n'.join(['>' + s for s in fields['subject'].split('\n') if s])

        # —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º "_", –≤—ã—á–∏—â–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
        fields['description'] = fields['description'].replace('_', r'\_')
        fields['description'] = fields['description'].replace('\r', '')
        fields['description'] = '\n'.join([s for s in fields['description'].split('\n') if s])

        # –µ—Å–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ - –ø–µ—Ä–µ—Å—ã–ª–∫–∞ –¥—Ä—É–≥–æ–≥–æ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞, —Ç–æ –ø–∞—Ä—Å–∏–º –µ–≥–æ,
        # —Ñ–æ—Ä–º–∏—Ä—É–µ–º —á–∞—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è, –ø—Ä–µ–≤—Ä–∞—â–∞–µ–º –≤ —Ü–∏—Ç–∞—Ç—É –∏ —Å–∫–ª–µ–∏–≤–∞–µ–º —Å –æ—Å–Ω–æ–≤–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.
        if fields['description'].startswith('–î–ª—è –≥—Ä—É–ø–ø—ã 2-–∞—è –ª–∏–Ω–∏—è –í–ö –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä (VK Teams)'):
            descr_inc = Incident.from_description(fields['description'])
            descr_fields = asdict(descr_inc)
            fields['description'] = inc_description_template.substitute(descr_fields)
        fields['description'] = '\n'.join(['>' + s for s in fields['description'].split('\n')])

        inline_kb = '[[{"text": "üîó –ò–Ω—Ü–∏–¥–µ–Ω—Ç –≤ ITSM", "url": "' + fields['link'] + '", "style": "primary"}]'
        if self.status == 'OPEN':
            inline_kb += ',[{"text": "–û—Ç–º–µ—Ç–∏—Ç—å –∑–∞–∫—Ä—ã—Ç–æ–π", "callbackData": "close", "style": "attention"}]]'
        elif self.status == 'CLOSED':
            inline_kb += ',[{"text": "–û—Ç–º–µ—Ç–∏—Ç—å –æ—Ç–∫—Ä—ã—Ç–æ–π", "callbackData": "open", "style": "base"}]]'
        else:
            inline_kb += ']'

        return {
            'text': inc_notification_template.substitute(fields),
            'inlineKB': inline_kb
        }
