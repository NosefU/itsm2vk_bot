name: (Re)deploy bot on server

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy-and-rerun:

    runs-on: ubuntu-latest

    steps:
    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.5.4
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: Check if bot directory exists
      id: check-directory
      run: ssh -o StrictHostKeyChecking=no ${{ vars.SSH_USER }}@${{ vars.SERVER_IP }} '[ -d ~/itsm2vk_bot/itsm2vk_bot ]'

    - name: Update Bot
      if: steps.check-directory.outcome == 'success'
      run: |
        ssh -o StrictHostKeyChecking=no ${{ vars.SSH_USER }}@${{ vars.SERVER_IP }} '
          cd ~/itsm2vk_bot/itsm2vk_bot && 
          git pull && 
          make build
        '

    - name: Initial Deployment
      if: steps.check-directory.outcome == 'failure'
      run: |
        ssh -o StrictHostKeyChecking=no ${{ vars.SSH_USER }}@${{ vars.SERVER_IP }} '
          mkdir ~/itsm2vk_bot &&
          git clone https://github.com/${{ github.repository }} ~/itsm2vk_bot &&
          cd ~/itsm2vk_bot/itsm2vk_bot &&
          make build
        '
        
    - name: Create .env file
      run: |
        touch .env
        echo '${{ toJSON(vars) }}' | jq -r 'to_entries | map(select(.key | startswith("BOT_"))) | map("\(.key[4:] | ascii_upcase)=\(.value)") | .[]' > .env
        echo '${{ toJSON(secrets) }}' | jq -r 'to_entries | map(select(.key | startswith("BOT_"))) | map("\(.key[4:] | ascii_upcase)=\(.value)") | .[]' >> .env
        

    - name: Display .env content
      run: cat .env

#    - name: Generate .env file
#      run: |
#        ssh -o StrictHostKeyChecking=no ${{ vars.SSH_USER }}@${{ vars.SERVER_IP }} '
#          echo "Generating .env file..." &&
#          cd ~/itsm2vk_bot/itsm2vk_bot &&
#          rm -f .env &&
#          touch .env &&
#          for var in "${!env[@]}" "${!secrets[@]}"; do
#            if [[ $var == BOT_* ]]; then
#              env_var_name=${var#BOT_}
#              echo "$env_var_name=${!var}" >> .env
#            fi
#          done
#        '

    - name: Run bot
      run: |
        ssh -o StrictHostKeyChecking=no ${{ vars.SSH_USER }}@${{ vars.SERVER_IP }} '
          cd ~/itsm2vk_bot/itsm2vk_bot &&
          make hard_restart
        '
